user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://backend:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
        }

        # CORSプリフライトリクエスト（OPTIONS）専用
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
        }
    }

# HTTPSサーバーブロック（証明書がない場合はコメントアウトしてください）
# server {
#     listen 443 ssl;  # 443番ポートでSSL有効で待ち受け
#     server_name your-domain;  # 対象のドメイン名（実際のドメインに置き換えてください）

#     # SSL証明書のパス（Let's Encryptなどで取得した証明書ファイル）
#     ssl_certificate /etc/letsencrypt/live/your-domain/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain/privkey.pem;

#     # SSLプロトコル設定（TLS1.2/1.3を使用）
#     ssl_protocols TLSv1.2 TLSv1.3;
#     # 推奨の暗号スイート設定
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256';
#     ssl_prefer_server_ciphers on;

#     # ルートパス（フロントエンドのビルド済みファイルの配信設定）
#     location / {
#         root /usr/share/nginx/html;
#         try_files $uri /index.html;  # SPA対応のため存在しないファイルはindex.htmlへ
#     }

#     # APIへのリバースプロキシ設定
#     location /api/ {
#         proxy_pass http://backend:8000/;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         # CORSヘッダー設定（必要に応じて調整してください）
#         add_header 'Access-Control-Allow-Origin' '*';
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE';
#         add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
#     }

#     # Let's Encryptの証明書更新用チャレンジディレクトリ
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }
# }
}
