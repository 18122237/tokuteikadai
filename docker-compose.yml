version: "3.8"

services:
  db:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tokuteikadai
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
      TZ: Asia/Tokyo
    ports:
      - "3306:3306"
    volumes:
      - ./project/initdb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysql -u root -prootpassword -e 'USE tokuteikadai;'"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  backend:
    build:
      context: ./project/backend
      dockerfile: Dockerfile
    container_name: backend
    restart: "always"
    # command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./project/backend:/app
    environment:
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: appuser
      DB_PASSWORD: apppassword
      DB_NAME: tokuteikadai
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENAI_API_KEY: "***"

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8000:8000"
    networks:
      - app-network

  frontend:
    image: node:20-slim
    container_name: frontend
    working_dir: /app
    command: npm start
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - HOST=0.0.0.0
    volumes:
      - ./project/frontend:/app
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - app-network

  nginx:
    image: nginx:1.25
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      #- "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./project/frontend/build:/usr/share/nginx/html:ro
      #- ./nginx/certbot/www:/var/www/certbot
      #- ./nginx/certbot/conf:/etc/letsencrypt
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - app-network 

volumes:
  db_data:
  redis_data:

networks:
  app-network:
